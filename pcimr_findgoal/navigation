#!/usr/bin/env python

import rospy 
from sensor_msgs.msg import LaserScan 
from geometry_msgs.msg import Point 
from std_msgs.msg import String 
from  pcimr_simulation.srv import InitPos


class NavigationNode():

    robot_position_x = 0
    robot_position_y = 0
    robot_position_z = 0


    def __init__(self):
       
        # Initialize Publisher
        self.pub_robot_move = rospy.Publisher('/move', String, queue_size=10)

        # Initialize Subscribers
        self.sub_robot_position = rospy.Subscriber("/robot_pos", Point, self.callback)
        self.sub_scan = rospy.Subscriber("/scan", LaserScan, self.move)

        # Initialize Services
        self.service_init = rospy.Service('/init_pos', InitPos, self.init_pos)

    
    def init_pos(request):
        if request.x == 2 and request.y == 0:
            return True
        return False

    def move(self, data):
        global robot_position_x
        global robot_position_y

        if robot_position_x == 16 and robot_position_y == 12:
            rospy.loginfo("Robot reached goal!") 
        elif data.ranges[2] > 1: 
            self.pub_robot_move.publish("N")
            rospy.loginfo("Robot turning north at %i %i" % (robot_position_x, robot_position_y))
        else:
            self.pub_robot_move.publish("E")
            rospy.loginfo("Robot turning east at %i %i" % (robot_position_x, robot_position_y))
        

    def callback(self, data):
        global robot_position_x
        global robot_position_y
        global robot_position_z 

        robot_position_x = data.x
        robot_position_y = data.y
        robot_position_z = data.z
    
    def navigate(self):
        return True


    def run(self, rate: float = 1):
   
        while not rospy.is_shutdown():
            if rate:
                rospy.sleep(1/rate)


if __name__ == "__main__":
    rospy.init_node('navigation_node')
    navigation_node = NavigationNode()
    navigation_node.run(rate=1)
    
  
